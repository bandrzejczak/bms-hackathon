buildscript {
    ext {
        springBootVersion = '1.3.0.M1'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
        classpath 'org.ajoberstar:gradle-git:1.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'hackathon'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-mustache")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.apache.httpcomponents:httpclient:4.5")
    compile("com.google.code.gson:gson:2.3.1")
    compile("com.h2database:h2")
    compile('com.google.guava:guava:18.0')

    compile("com.sun.jersey:jersey-core:1.19")
    compile("com.sun.jersey:jersey-client:1.19")

    compile("com.google.guava:guava:18.0")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.codehaus.groovy:groovy-all:2.4.1")
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4")
    testCompile('org.assertj:assertj-core:1.2.0')
    testCompile("cglib:cglib-nodep:3.1")
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}

task generateGitProperties {
    def repo = org.ajoberstar.grgit.Grgit.open(project.file('.'))
    def lastCommit = repo.head()

    def gitProps = new File("src/main/resources/git.properties")
    gitProps.createNewFile()
    gitProps.text = """\
        git.commit.id = ${lastCommit.id}
        git.commit.time = ${new Date(lastCommit.time * 1000L).format("yyyy-MM-dd' 'HH:mm:ssZ")}
        git.branch = ${repo.branch.current.name}
        """.stripIndent()
}
project.tasks.jar.dependsOn('generateGitProperties')